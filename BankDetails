package com.example.bnaka20242;

import java.util.InputMismatchException;
import java.util.Scanner;
import java.util.ArrayList;

abstract class Account {
    protected String accno;
    protected String name;
    protected String acc_type;
    protected double balance;
    protected String bankName;
    protected ArrayList<String> transactions = new ArrayList<>();
    protected Scanner sc = new Scanner(System.in);

    public Account(String bankName) {
        this.bankName = bankName;
    }

    // Abstract methods
    public abstract void openAccount();
    public abstract void showAccount();
    public abstract boolean search(String ac_no);
    public abstract void showTransactions();

    // Concrete methods
    public double getBalance() {
        return balance;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }
}

class BankDetails extends Account {
    private double flatFee;
    private double percentFee;

    public BankDetails(double flatFee, double percentFee, String bankName) {
        super(bankName);
        this.flatFee = flatFee;
        this.percentFee = percentFee;
    }

    @Override
    public void openAccount() {
        try {
            System.out.println("Welcome to " + bankName + " Bank");
            System.out.print("Enter Account No: ");
            accno = sc.next();
            System.out.print("Enter Account type: ");
            acc_type = sc.next();
            System.out.print("Enter Name: ");
            name = sc.next();
            System.out.print("Enter Balance (in dollars): ");
            balance = sc.nextDouble();
        } catch (InputMismatchException e) {
            System.out.println("Invalid input! Please enter a valid number.");
            sc.nextLine(); // Clear the input buffer
            openAccount(); // Retry opening an account
        }
    }

    @Override
    public void showAccount() {
        System.out.println("Name of account holder: " + name);
        System.out.println("Account no.: " + accno);
        System.out.println("Account type: " + acc_type);
        System.out.println("Balance: $" + String.format("%.2f", balance));
    }

    public double deposit(double amt, int feeChoice) {
        double totalFee = getTransactionFee(amt, feeChoice);
        if (balance + amt - totalFee >= 0) {
            balance += amt - totalFee;
            transactions.add("Deposited: $" + amt + ", Fee: $" + totalFee);
            System.out.println("Deposit successful! Current balance: $" + String.format("%.2f", balance));
            return totalFee;
        } else {
            System.out.println("Deposit failed! Transaction would cause negative balance.");
            return 0.0;
        }
    }

    // Overloaded method for deposit with a default fee choice
    public double deposit(double amt) {
        return deposit(amt, 1); // Default fee choice is flat fee
    }

    public double withdrawal(double amt, int feeChoice) {
        double totalFee = getTransactionFee(amt, feeChoice);
        if (balance >= amt + totalFee) {
            balance -= amt + totalFee;
            transactions.add("Withdrew: $" + amt + ", Fee: $" + totalFee);
            System.out.println("Withdrawal successful! Current balance: $" + String.format("%.2f", balance));
            return totalFee;
        } else {
            System.out.println("Withdrawal failed! Insufficient balance.");
            return 0.0;
        }
    }

    // Overloaded method for withdrawal with a default fee choice
    public double withdrawal(double amt) {
        return withdrawal(amt, 1); // Default fee choice is flat fee
    }

    @Override
    public boolean search(String ac_no) {
        if (accno.equals(ac_no)) {
            showAccount();
            return true;
        }
        return false;
    }

    public double transfer(BankDetails receiver, double amt, int feeChoice) {
        double totalFee = getTransactionFee(amt, feeChoice);
        if (balance >= amt + totalFee) {
            balance -= amt + totalFee;
            receiver.balance += amt;
            transactions.add("Transferred: $" + amt + " to " + receiver.accno + ", Fee: $" + totalFee);
            System.out.println("Transfer successful! Current balance: $" + String.format("%.2f", balance));
            return totalFee;
        } else {
            System.out.println("Transfer failed! Insufficient balance for transfer.");
            return 0.0;
        }
    }

    public double getTransactionFee(double amt, int feeChoice) {
        double totalFee = 0.0;
        if (feeChoice == 1) {
            totalFee = flatFee;
        } else if (feeChoice == 2) {
            totalFee = (amt * percentFee) / 100;
        } else {
            System.out.println("Invalid choice! No fee applied.");
        }
        return totalFee;
    }

    @Override
    public void showTransactions() {
        if (transactions.isEmpty()) {
            System.out.println("No transactions found.");
        } else {
            for (String transaction : transactions) {
                System.out.println(transaction);
            }
        }
    }

}
